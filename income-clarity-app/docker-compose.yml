# Docker Compose for Income Clarity Job Queue System
# Provides Redis, Worker services, and monitoring for production deployment

version: '3.8'

services:
  # Redis - Job queue backend
  redis:
    image: redis:7.2-alpine
    container_name: income-clarity-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - income-clarity-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Primary Worker - Handles sync and high-priority jobs
  worker-primary:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: income-clarity-worker-primary
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_CONCURRENCY=5
      - WORKER_QUEUES=sync,webhook
      - HEALTH_CHECK_PORT=3001
      - WORKER_NAME=primary-worker-1
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - income-clarity-network
    volumes:
      - ./logs:/app/logs
      - ./archives:/app/archives
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Email Worker - Handles email notifications
  worker-email:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: income-clarity-worker-email
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_CONCURRENCY=10
      - WORKER_QUEUES=email,notifications
      - HEALTH_CHECK_PORT=3002
      - WORKER_NAME=email-worker-1
    ports:
      - "3002:3002"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - income-clarity-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Cleanup Worker - Handles maintenance tasks
  worker-cleanup:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: income-clarity-worker-cleanup
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_CONCURRENCY=1
      - WORKER_QUEUES=cleanup
      - HEALTH_CHECK_PORT=3003
      - WORKER_NAME=cleanup-worker-1
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - income-clarity-network
    volumes:
      - ./logs:/app/logs
      - ./archives:/app/archives
      - ./tmp:/app/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Commander - Web UI for Redis monitoring (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: income-clarity-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-password}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - income-clarity-network
    profiles:
      - development
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus - Metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: income-clarity-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - income-clarity-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana - Metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: income-clarity-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - income-clarity-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregator (optional)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: income-clarity-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/income-clarity
    networks:
      - income-clarity-network
    profiles:
      - logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Networks
networks:
  income-clarity-network:
    driver: bridge
    name: income-clarity-network

# Volumes
volumes:
  redis_data:
    driver: local
    name: income-clarity-redis-data
    
  prometheus_data:
    driver: local
    name: income-clarity-prometheus-data
    
  grafana_data:
    driver: local
    name: income-clarity-grafana-data

# Development override (use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up)
---
# docker-compose.dev.yml content would go in a separate file
# This section shows what would be in that file:

# version: '3.8'
# services:
#   redis:
#     ports:
#       - "6379:6379"
#     volumes:
#       - ./config/redis-dev.conf:/etc/redis/redis.conf:ro
#   
#   worker-primary:
#     environment:
#       - NODE_ENV=development
#       - WORKER_CONCURRENCY=2
#     volumes:
#       - .:/app
#       - /app/node_modules
#     command: ["npm", "run", "dev:worker"]
#
#   # Enable all monitoring services in development
#   redis-commander:
#     profiles: []
#   prometheus:
#     profiles: []
#   grafana:
#     profiles: []