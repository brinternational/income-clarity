name: E2E Tests - Income Clarity

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        browser: [chromium, firefox]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          NODE_ENV: production
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.node-version }}-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage-${{ matrix.node-version }}-${{ matrix.browser }}
          path: coverage/
          retention-days: 7

  mobile-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Build application
        run: npm run build
        
      - name: Run Mobile E2E tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"
        env:
          NODE_ENV: production
          
      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30

  accessibility-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Build application
        run: npm run build
        
      - name: Run Accessibility tests
        run: npx playwright test settings-and-premium.spec.ts
        env:
          NODE_ENV: production
          
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30

  performance-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Build application
        run: npm run build
        
      - name: Run Performance tests
        run: npx playwright test comprehensive-features-test.spec.ts --grep="Performance"
        env:
          NODE_ENV: production
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30

  comprehensive-suite:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Run Full Comprehensive Test Suite
        run: npm run test:e2e
        env:
          NODE_ENV: production
          CI: true
          
      - name: Generate Test Report
        run: npx playwright show-report --host=0.0.0.0 &
        
      - name: Upload comprehensive results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
            coverage/
          retention-days: 30
          
      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            // Read test results if available
            let testSummary = 'E2E tests completed. Check artifacts for detailed results.';
            
            try {
              if (fs.existsSync('test-results/comprehensive-test-report.json')) {
                const report = JSON.parse(fs.readFileSync('test-results/comprehensive-test-report.json', 'utf8'));
                testSummary = `
                ## 🧪 E2E Test Results
                
                - **Total Tests**: ${report.summary.totalTests}
                - **Passed**: ${report.summary.passedTests} ✅
                - **Failed**: ${report.summary.failedTests} ❌
                - **Success Rate**: ${report.summary.successRate}%
                
                ${report.summary.failedTests > 0 ? '⚠️ Some tests failed. Check the artifacts for details.' : '🎉 All tests passed!'}
                `;
              }
            } catch (error) {
              console.log('Could not read test report:', error);
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  security-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Build application
        run: npm run build
        
      - name: Run Security-focused tests
        run: npx playwright test auth-flow.spec.ts
        env:
          NODE_ENV: production
          
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30

  # Notification job that runs after all tests complete
  notify-results:
    needs: [test, mobile-tests, accessibility-tests, performance-tests, comprehensive-suite, security-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Test suite execution completed"
          echo "Main tests: ${{ needs.test.result }}"
          echo "Mobile tests: ${{ needs.mobile-tests.result }}"
          echo "Accessibility tests: ${{ needs.accessibility-tests.result }}"
          echo "Performance tests: ${{ needs.performance-tests.result }}"
          echo "Comprehensive suite: ${{ needs.comprehensive-suite.result }}"
          echo "Security tests: ${{ needs.security-tests.result }}"
          
          # Determine overall status
          if [[ "${{ needs.test.result }}" == "success" && \
                "${{ needs.mobile-tests.result }}" == "success" && \
                "${{ needs.accessibility-tests.result }}" == "success" && \
                "${{ needs.performance-tests.result }}" == "success" && \
                "${{ needs.comprehensive-suite.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "✅ ALL E2E TESTS PASSED - Application is production ready!"
            echo "OVERALL_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some E2E tests failed - Review results before deployment"
            echo "OVERALL_STATUS=failure" >> $GITHUB_ENV
          fi
          
      - name: Create summary
        run: |
          echo "## 🧪 E2E Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Main Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile Tests | ${{ needs.mobile-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive | ${{ needs.comprehensive-suite.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ env.OVERALL_STATUS == 'success' && '✅ Production Ready' || '❌ Issues Detected' }}" >> $GITHUB_STEP_SUMMARY