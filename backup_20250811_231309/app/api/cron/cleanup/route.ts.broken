/**
 * Cron Job: System Cleanup
 * Removes old data, logs, and performs maintenance tasks
 * Runs daily at 2 AM to keep system clean and performant
 */

import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { LocalModeUtils } from '@/lib/config/local-mode'
import { multiLevelCache } from '@/lib/cache-service'

export const runtime = 'nodejs'
export const maxDuration = 600 // 10 minutes max for cleanup

interface CleanupStats {
  expiredSessionsRemoved: number
  oldLogsRemoved: number
  cacheEntriesCleared: number
  tempDataRemoved: number
  databaseVacuumed: boolean
  errors: number
  totalTime: number
}

export async function GET(request: NextRequest) {
  const startTime = Date.now()
  const stats: CleanupStats = {
    expiredSessionsRemoved: 0,
    oldLogsRemoved: 0,
    cacheEntriesCleared: 0,
    tempDataRemoved: 0,
    databaseVacuumed: false,
    errors: 0,
    totalTime: 0
  }
  
  try {
    // LOCAL_MODE: Skip cleanup
    if (LocalModeUtils.isEnabled()) {
      LocalModeUtils.log('Cron Cleanup - LOCAL_MODE: Skipping cleanup')
      return NextResponse.json({ 
        success: true, 
        message: 'Skipped in LOCAL_MODE',
        stats,
        processingTime: Date.now() - startTime 
      })
    }
    
    // Verify this is a legitimate cron request
    const authHeader = request.headers.get('authorization')
    const expectedAuth = `Bearer ${process.env.CRON_SECRET}`
    
    if (process.env.NODE_ENV === 'production' && (!authHeader || authHeader !== expectedAuth)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Initialize Supabase client
    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
      return NextResponse.json({ 
        error: 'Missing Supabase configuration' 
      }, { status: 500 })
    }

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    // console.log('[CRON] Starting system cleanup...')
// 
    // 1. Remove expired user sessions
    try {
      // console.log('[CRON] Cleaning expired user sessions...')
      // 
      const expiredCutoff = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // 30 days ago
      
      const { data: expiredSessions, error: sessionError } = await supabase
        .from('user_sessions')
        .delete()
        .lt('created_at', expiredCutoff.toISOString())
        .select('id')
      
      if (sessionError) {
        throw new Error(`Failed to remove expired sessions: ${sessionError.message}`)
      }
      
      stats.expiredSessionsRemoved = expiredSessions?.length || 0
      // console.log(`[CRON] ✅ Removed ${stats.expiredSessionsRemoved} expired sessions`)
      // 
    } catch (error) {
      stats.errors++
      // console.error('[CRON] ❌ Session cleanup failed:', error)
    // }

    // 2. Remove old performance logs
    try {
      // console.log('[CRON] Cleaning old performance logs...')
      // 
      const logCutoff = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 days ago
      
      const { data: oldLogs, error: logError } = await supabase
        .from('query_performance_log')
        .delete()
        .lt('executed_at', logCutoff.toISOString())
        .select('id')
      
      if (logError) {
        throw new Error(`Failed to remove old logs: ${logError.message}`)
      }
      
      stats.oldLogsRemoved = oldLogs?.length || 0
      // console.log(`[CRON] ✅ Removed ${stats.oldLogsRemoved} old performance logs`)
      // 
    } catch (error) {
      stats.errors++
      // console.error('[CRON] ❌ Log cleanup failed:', error)
    // }

    // 3. Clean up old view refresh logs
    try {
      // console.log('[CRON] Cleaning view refresh logs...')
      // 
      const viewLogCutoff = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // 30 days ago
      
      const { data: oldViewLogs, error: viewLogError } = await supabase
        .from('view_refresh_log')
        .delete()
        .lt('created_at', viewLogCutoff.toISOString())
        .select('id')
      
      if (viewLogError) {
        // console.warn('[CRON] View refresh log cleanup failed:', viewLogError.message)
      // } else {
        const removedCount = oldViewLogs?.length || 0
        // console.log(`[CRON] ✅ Removed ${removedCount} old view refresh logs`)
      // }
      
    } catch (error) {
      // console.error('[CRON] View refresh log cleanup failed:', error)
    // }

    // 4. Clean up temporary/test data
    try {
      // console.log('[CRON] Cleaning temporary data...')
      // 
      // Remove test users created for load testing
      const { data: testUsers, error: testUserError } = await supabase
        .from('users')
        .delete()
        .like('email', 'loadtest%@example.com')
        .select('id')
      
      if (testUserError) {
        throw new Error(`Failed to remove test users: ${testUserError.message}`)
      }
      
      stats.tempDataRemoved = testUsers?.length || 0
      // console.log(`[CRON] ✅ Removed ${stats.tempDataRemoved} test users`)
      // 
    } catch (error) {
      stats.errors++
      // console.error('[CRON] ❌ Temporary data cleanup failed:', error)
    // }

    // 5. Clean cache entries
    try {
      // console.log('[CRON] Cleaning L1 cache...')
      // 
      // Clean L1 cache of expired items
      const cleanedL1 = multiLevelCache.cleanupL1Cache()
      stats.cacheEntriesCleared = cleanedL1
      
      // console.log(`[CRON] ✅ Cleaned ${stats.cacheEntriesCleared} L1 cache entries`)
      // 
    } catch (error) {
      stats.errors++
      // console.error('[CRON] ❌ Cache cleanup failed:', error)
    // }

    // 6. Database maintenance
    try {
      // console.log('[CRON] Running database maintenance...')
      // 
      // Update table statistics for query optimizer
      const { error: statsError } = await supabase.rpc('update_table_statistics')
      
      if (statsError) {
        throw new Error(`Database statistics update failed: ${statsError.message}`)
      }
      
      stats.databaseVacuumed = true
      // console.log('[CRON] ✅ Database statistics updated')
      // 
    } catch (error) {
      stats.errors++
      // console.error('[CRON] ❌ Database maintenance failed:', error)
    // }

    // 7. Log cleanup completion to maintenance log
    try {
      const { error: maintenanceError } = await supabase
        .from('maintenance_log')
        .insert({
          activity: 'daily_cleanup',
          completed_at: new Date().toISOString(),
          details: {
            stats,
            duration_ms: Date.now() - startTime
          }
        })
      
      if (maintenanceError) {
        // console.warn('[CRON] Failed to log maintenance activity:', maintenanceError.message)
      // }
    } catch (error) {
      // console.error('[CRON] Maintenance logging failed:', error)
    // }

    stats.totalTime = Date.now() - startTime

    // console.log(`[CRON] System cleanup completed in ${stats.totalTime}ms:
  // - Expired sessions removed: ${stats.expiredSessionsRemoved}
  // - Old logs removed: ${stats.oldLogsRemoved}
  // - Cache entries cleared: ${stats.cacheEntriesCleared}
  // - Temp data removed: ${stats.tempDataRemoved}
  // - Database maintenance: ${stats.databaseVacuumed ? 'completed' : 'failed'}
  // - Errors: ${stats.errors}`)

    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      stats,
      message: `Cleanup completed with ${stats.errors} errors`
    })

  } catch (error) {
    stats.errors++
    stats.totalTime = Date.now() - startTime
    // console.error('[CRON] System cleanup failed:', error)
    // 
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      stats,
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}