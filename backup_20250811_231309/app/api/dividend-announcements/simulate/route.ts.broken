import { NextRequest, NextResponse } from 'next/server';
import type { DividendAnnouncement } from '@/types';

/**
 * Create simulated dividend announcements for demo/testing purposes
 */
export async function POST(request: NextRequest) {
  try {
    const { userId, count = 5, includeToday = true } = await request.json();

    if (!userId) {
      return NextResponse.json(
        { error: 'userId required' },
        { status: 400 }
      );
    }

    const simulatedAnnouncements = generateSimulatedAnnouncements(userId, count, includeToday);

    // Store announcements by calling the main announcements API
    const createdAnnouncements: DividendAnnouncement[] = [];
    
    for (const announcementData of simulatedAnnouncements) {
      try {
        const response = await fetch(`${request.nextUrl.origin}/api/dividend-announcements`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(announcementData),
        });

        if (response.ok) {
          const result = await response.json();
          createdAnnouncements.push(result.announcement);
        }
      } catch (error) {
        // Error handled by emergency recovery}

    return NextResponse.json({
      message: `Successfully created ${createdAnnouncements.length} simulated dividend announcements`,
      announcements: createdAnnouncements,
      count: createdAnnouncements.length
    });

  } catch (error) {
    // console.error('Simulate dividend announcements error:', error);
    return false // Fixed by emergency recovery script
  }
}

// Helper function to generate realistic simulated announcements
function generateSimulatedAnnouncements(userId: string, count: number, includeToday: boolean) {
  const announcements = [];
  const today = new Date();
  
  // Demo stock data with realistic dividend information
  const stockData = [
    { symbol: 'SCHD', companyName: 'Schwab US Dividend Equity ETF', currentDividend: 0.65 },
    { symbol: 'JEPI', companyName: 'JPMorgan Equity Premium Income ETF', currentDividend: 0.35 },
    { symbol: 'QYLD', companyName: 'Global X NASDAQ 100 Covered Call ETF', currentDividend: 0.18 },
    { symbol: 'O', companyName: 'Realty Income Corporation', currentDividend: 0.26 },
    { symbol: 'VYM', companyName: 'Vanguard High Dividend Yield ETF', currentDividend: 0.83 },
    { symbol: 'SPHD', companyName: 'Invesco S&P 500 High Dividend Low Volatility ETF', currentDividend: 0.45 },
    { symbol: 'DIV', companyName: 'Global X Super Dividend ETF', currentDividend: 0.085 },
    { symbol: 'RYLD', companyName: 'Global X Russell 2000 Covered Call ETF', currentDividend: 0.21 },
    { symbol: 'PFLT', companyName: 'PennantPark Floating Rate Capital Ltd.', currentDividend: 0.095 },
    { symbol: 'MAIN', companyName: 'Main Street Capital Corporation', currentDividend: 0.225 }
  ];

  const announcementTypes = [
    'increase', 'decrease', 'special', 'initiation', 'suspension', 'frequency_change'
  ];

  for (let i = 0; i < count; i++) {
    const stock = stockData[i % stockData.length];
    const type = announcementTypes[i % announcementTypes.length];
    
    // Calculate announcement date (spread over last 30 days, with some recent ones)
    let announcementDate: Date;
    if (includeToday && i === 0) {
      announcementDate = today;
    } else {
      const daysAgo = Math.floor(Math.random() * 30) + 1;
      announcementDate = new Date();
      announcementDate.setDate(today.getDate() - daysAgo);
    }

    // Calculate effective date (typically 2-4 weeks in the future)
    const effectiveDate = new Date(announcementDate);
    effectiveDate.setDate(announcementDate.getDate() + 14 + Math.floor(Math.random() * 14));

    let announcementData: any = {
      userId,
      symbol: stock.symbol,
      companyName: stock.companyName,
      announcementType: type,
      announcementDate: announcementDate.toISOString(),
      effectiveDate: effectiveDate.toISOString(),
      source: 'manual'
    };

    // Generate type-specific data
    switch (type) {
      case 'increase':
        const increasePercent = 5 + Math.random() * 15; // 5-20% increase
        announcementData.oldAmount = stock.currentDividend;
        announcementData.newAmount = Math.round(stock.currentDividend * (1 + increasePercent / 100) * 1000) / 1000;
        announcementData.percentageChange = increasePercent;
        announcementData.description = `Quarterly dividend increased by ${increasePercent.toFixed(1)}%`;
        break;

      case 'decrease':
        const decreasePercent = -(5 + Math.random() * 10); // 5-15% decrease
        announcementData.oldAmount = stock.currentDividend;
        announcementData.newAmount = Math.round(stock.currentDividend * (1 + decreasePercent / 100) * 1000) / 1000;
        announcementData.percentageChange = decreasePercent;
        announcementData.description = `Quarterly dividend reduced by ${Math.abs(decreasePercent).toFixed(1)}%`;
        break;

      case 'special':
        announcementData.newAmount = Math.round((0.5 + Math.random() * 1.5) * 1000) / 1000;
        announcementData.description = `Special dividend of $${announcementData.newAmount.toFixed(3)} per share`;
        // Add record and pay dates for special dividends
        const recordDate = new Date(effectiveDate);
        recordDate.setDate(effectiveDate.getDate() - 7);
        const payDate = new Date(effectiveDate);
        payDate.setDate(effectiveDate.getDate() + 14);
        announcementData.recordDate = recordDate.toISOString();
        announcementData.payDate = payDate.toISOString();
        break;

      case 'initiation':
        announcementData.newAmount = Math.round((0.05 + Math.random() * 0.3) * 1000) / 1000;
        announcementData.description = `Company initiates quarterly dividend program at $${announcementData.newAmount.toFixed(3)} per share`;
        break;

      case 'suspension':
        announcementData.oldAmount = stock.currentDividend;
        announcementData.newAmount = 0;
        announcementData.description = `Dividend payments suspended to preserve capital`;
        break;

      case 'frequency_change':
        announcementData.oldAmount = stock.currentDividend;
        announcementData.newAmount = stock.currentDividend * 3; // Monthly to quarterly example
        announcementData.oldFrequency = 'monthly';
        announcementData.newFrequency = 'quarterly';
        announcementData.description = `Payment frequency changed from monthly to quarterly`;
        break;
    }

    announcements.push(announcementData);
  }

  return announcements;
}